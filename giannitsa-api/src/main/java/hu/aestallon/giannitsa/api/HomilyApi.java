/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hu.aestallon.giannitsa.api;

import hu.aestallon.giannitsa.model.Homily;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T18:20:37.870619300+01:00[Europe/Budapest]")
@Validated
@Tag(name = "homily", description = "Homilies")
public interface HomilyApi {

    default HomilyApiDelegate getDelegate() {
        return new HomilyApiDelegate() {};
    }

    /**
     * DELETE /homily/{homilyId}
     * Deletes the homily denoted by the id
     *
     * @param homilyId The ID of the homily to retrieve (required)
     * @return Homily successfully deleted. (status code 200)
     *         or Homily not found. (status code 404)
     */
    @Operation(
        operationId = "deleteHomily",
        tags = { "homily" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Homily successfully deleted."),
            @ApiResponse(responseCode = "404", description = "Homily not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/homily/{homilyId}"
    )
    default ResponseEntity<Void> deleteHomily(
        @Parameter(name = "homilyId", description = "The ID of the homily to retrieve", required = true) @PathVariable("homilyId") Long homilyId
    ) {
        return getDelegate().deleteHomily(homilyId);
    }


    /**
     * GET /homily : Retrieves every homily.
     * Retrieves all stored homilies.
     *
     * @return Successful retrieval of every homily (status code 200)
     */
    @Operation(
        operationId = "getAllHomilies",
        summary = "Retrieves every homily.",
        tags = { "homily" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful retrieval of every homily", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Homily.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/homily",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Homily>> getAllHomilies(
        
    ) {
        return getDelegate().getAllHomilies();
    }


    /**
     * GET /homily/{homilyId}
     * Retrieves a single homily by its id.
     *
     * @param homilyId The ID of the homily to retrieve (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getHomily",
        tags = { "homily" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Homily.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/homily/{homilyId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Homily> getHomily(
        @Parameter(name = "homilyId", description = "The ID of the homily to retrieve", required = true) @PathVariable("homilyId") Long homilyId
    ) {
        return getDelegate().getHomily(homilyId);
    }


    /**
     * POST /homily : Uploads a new homily.
     * 
     *
     * @param homily  (required)
     * @param content  (optional)
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "postHomily",
        summary = "Uploads a new homily.",
        tags = { "homily" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/homily",
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> postHomily(
        @Parameter(name = "homily", description = "", required = true) @Valid @RequestParam(value = "homily", required = true) Homily homily,
        @Parameter(name = "content", description = "") @RequestPart(value = "content", required = false) MultipartFile content
    ) {
        return getDelegate().postHomily(homily, content);
    }


    /**
     * PUT /homily/{homilyId}
     * Updates the contents of a single homily
     *
     * @param homilyId The ID of the homily to retrieve (required)
     * @param homily  (required)
     * @return Success (status code 200)
     *         or Homily not found (status code 404)
     */
    @Operation(
        operationId = "updateHomily",
        tags = { "homily" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Homily.class))
            }),
            @ApiResponse(responseCode = "404", description = "Homily not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/homily/{homilyId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Homily> updateHomily(
        @Parameter(name = "homilyId", description = "The ID of the homily to retrieve", required = true) @PathVariable("homilyId") Long homilyId,
        @Parameter(name = "Homily", description = "", required = true) @Valid @RequestBody Homily homily
    ) {
        return getDelegate().updateHomily(homilyId, homily);
    }

}
